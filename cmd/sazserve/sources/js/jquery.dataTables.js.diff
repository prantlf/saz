--- node_modules/datatables.net/js/jquery.dataTables.js.vendor	2020-05-17 22:46:12.000000000 +0200
+++ node_modules/datatables.net/js/jquery.dataTables.js	2020-05-18 00:59:45.000000000 +0200
@@ -4383,7 +4383,7 @@
 	 *  @param {bool} caseInsensitive Do case insenstive matching or not
 	 *  @memberof DataTable#oApi
 	 */
-	function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
+	function _fnFilterOld( settings, input, force, regex, smart, caseInsensitive )
 	{
 		var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
 		var prevSearch = settings.oPreviousSearch.sSearch;
@@ -4428,6 +4428,40 @@
 			settings.aiDisplay = filtered;
 		}
 	}
+  function _fnFilter (settings, input, force, regex, smart, caseInsensitive) {
+    var displayMaster = settings.aiDisplayMaster
+    if (!input) {
+      settings.aiDisplay = displayMaster.slice()
+    } else {
+  		if (DataTable.ext.search.length !== 0) {
+  			force = true
+  		}
+      const invalidated = _fnFilterData(settings)
+      const prevSearch = settings.oPreviousSearch.sSearch
+      if (invalidated || force || prevSearch != input || settings.bSorted) {
+        settings.aiDisplay = displayMaster.slice()
+      }
+      const display = settings.aiDisplay
+      const filtered = []
+      const createSearchContext = settings.oInit.createSearchContext || _fnCreateSearchContext
+      const executeSearch = settings.oInit.executeSearch || _fnExecuteSearch
+      const context = createSearchContext(settings, input, regex, smart, caseInsensitive)
+      for (let i = 0; i < display.length; ++i) {
+        const data = settings.aoData[ display[i] ]
+        if (executeSearch.call(context, settings, data._aData, data._sFilterRow, input)) {
+          filtered.push(display[i])
+        }
+      }
+      settings.aiDisplay = filtered
+    }
+  }
+  function _fnCreateSearchContext (settings, input, regex, smart, caseInsensitive) {}
+  function _fnExecuteSearch (settings, data, dataString, input) {
+    input = input.trim()
+    if (!input) return true
+    dataString = dataString.trim().toLowerCase()
+    return dataString.includes(input)
+  }
 	
 	
 	/**
